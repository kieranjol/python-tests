.. ifiscripts documentation master file, created by
   sphinx-quickstart on Sat Apr  7 14:48:44 2018.
   You can adapt this file completely to your liking, but it should at least
   contain the root `toctree` directive.
   
summary
-------

Scripts for use in the IFI Irish Film Archive. Scripts have been tested
in OSX/Windows 7 (sometimes windows 10) and Ubuntu 14.04. The aim is to
make cross-platform scripts, but please get in touch with any issues. It
is best to download all scripts, as some of them share code.

Most scripts take either a file or a directory as their input, for
example ``makeffv1.py filename.mov`` or
``premis.py path/to/folder_of_stuff``. (It's best to just drag and drop
the folder or filename into the terminal)

Note: Documentation template has been copied from
`mediamicroservices <https://github.com/mediamicroservices/mm>`__

NOTE: ``Objects.py`` has been copied from
https://github.com/simsong/dfxml. ``walk_to_dfxml.py`` has also been
copied but has been customised in order to add command line arguments
for optionally turning off checksum generation. For more context, see
https://github.com/simsong/dfxml/pull/28

Purpose
-------

These python scripts facilitate much of our collections management procedures for digitised and born digital objects in the Irish Film Institute. We utilise a lot of open source tools, so we wanted to make these scripts as open as possible. This is why this project has the MIT License.

The Irish Film Institute has followed the SPECTRUM museum collections management standard for several years. These scripts attempt to follow SPECTRUM procedures while also utilising some of the concepts of the Open Archival Information System (OAIS). Initially the scripts only handled single video files, but they are now capable of handling:

* Digital Cinema Packages
* XDCAM cards
* DPX/TIFF image sequences
* Documents (.doc, .pdf etc)
* Images (.jpg, .TIFF etc)

An example workflow might be:

* A digital object is created or acquired by the IFI, and ``ingest`` begina.
* ``sipcreator.py`` is run on the object. This generates an ``Object Entry`` number (eg OE-1234), generates a folder structure for ``logs, metadata, objects``, generates a ``UUID``, extracts technical metadata, generates a md5 checksum manifest, and more. All of these preservation events are logged in a log file located in the ``logs`` directory. This log file tries to use ``PREMIS (PREservation Metadata Implementation Strategies)`` terminology as much as possible.
* While the package has yet to be accessioned and is still in the middle of ingest, temporary backups are required. ``copyit.py`` will generate backups, and it will use the checksum manifest generated by ``sipcreator.py`` to verify the integrity of the file transfer.
* If the package contains FFV1 or Matroska files, perhaps ``ffv1mkvvalidate.py`` could run, which would use ``mediaconch`` to verify the compliance of the files, and stores the information in the logfile.
* If the package passes our Quality Control Procedures, then it will be accessioned. ``accession.py`` will generate an accession number, rename the OE number with the accession number, generate a SHA-512 manifest and update the log file to document these new preservation events.
* A large batch of items can be accessioned using ``batchaccession.py``, and if you use the ``-pbcore`` command line argument with the accessioning scripts, then technical metadata will be generated in CSV format. This process can be run seperately by using ``makepbcore.py``. CSV was chosen instead of XML as this allows us to immediately import the CSV into our database system so that we have item level records.
* Access copies may be needed, so low-res watermarked proxies can be generated with ``bitc.py``, or high res mezzanines with ``prores.py``.
* The accessioned package can then be written to preservation storage, again using the ``copyit.py`` command.

So this is just one way of using the scripts from acquisition to preservation storage, but there are many other scripts for specific workflows, which you can investigate further down in the documentation.


.. toctree::
   :maxdepth: 3
   :caption: Contents:
   
   
   installation
   contributing
   README
